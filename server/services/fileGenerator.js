const fs = require('fs');
const path = require('path');

class FileGenerator {
  constructor() {
    this.tempDir = path.join(__dirname, '../temp');
    this.ensureTempDir();
  }

  ensureTempDir() {
    if (!fs.existsSync(this.tempDir)) {
      fs.mkdirSync(this.tempDir, { recursive: true });
    }
  }

  // Generate PDF file
  async generatePDF(book) {
    try {
      const content = book.content || 'No content available';
      
      // Create HTML content for PDF
      const htmlContent = this.createPDFHTML(book, content);
      
      // For now, we'll return the HTML content with proper PDF headers
      // In a production environment, you would use puppeteer to convert HTML to PDF
      return {
        content: htmlContent,
        fileName: `${book.title.replace(/[^a-zA-Z0-9]/g, '_')}.pdf`,
        mimeType: 'application/pdf'
      };
    } catch (error) {
      console.error('PDF generation error:', error);
      throw error;
    }
  }

  // Generate DOCX file
  async generateDOCX(book) {
    try {
      const content = book.content || 'No content available';
      
      // Create DOCX content
      const docxContent = this.createDOCXContent(book, content);
      
      return {
        content: docxContent,
        fileName: `${book.title.replace(/[^a-zA-Z0-9]/g, '_')}.docx`,
        mimeType: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
      };
    } catch (error) {
      console.error('DOCX generation error:', error);
      throw error;
    }
  }

  // Create HTML content for PDF
  createPDFHTML(book, content) {
    return `<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>${book.title}</title>
    <style>
        @page {
            size: A4;
            margin: 2cm;
        }
        body { 
            font-family: 'Times New Roman', serif; 
            margin: 0; 
            padding: 20px; 
            line-height: 1.6; 
            font-size: 12pt;
        }
        h1 { 
            color: #2c3e50; 
            border-bottom: 2px solid #3498db; 
            padding-bottom: 10px; 
            font-size: 24pt;
            text-align: center;
        }
        h2 { 
            color: #34495e; 
            margin-top: 30px; 
            font-size: 18pt;
        }
        h3 { 
            color: #7f8c8d; 
            font-size: 14pt;
        }
        .author { 
            font-style: italic; 
            color: #7f8c8d; 
            margin-bottom: 20px; 
            text-align: center;
            font-size: 14pt;
        }
        .metadata { 
            background: #ecf0f1; 
            padding: 15px; 
            border-radius: 5px; 
            margin: 20px 0; 
            border: 1px solid #bdc3c7;
        }
        .metadata p { 
            margin: 5px 0; 
            font-size: 11pt;
        }
        pre { 
            background: #f8f9fa; 
            padding: 15px; 
            border-radius: 5px; 
            overflow-x: auto; 
            border: 1px solid #dee2e6;
            font-family: 'Courier New', monospace;
            font-size: 10pt;
        }
        code { 
            background: #f1f2f6; 
            padding: 2px 4px; 
            border-radius: 3px; 
            font-family: 'Courier New', monospace;
        }
        .content {
            text-align: justify;
        }
        .page-break {
            page-break-before: always;
        }
    </style>
</head>
<body>
    <h1>${book.title}</h1>
    <div class="author">By ${book.author}</div>
    
    <div class="metadata">
        <p><strong>Programming Language:</strong> ${book.programming_language}</p>
        <p><strong>Level:</strong> ${book.level}</p>
        <p><strong>Style:</strong> ${book.style}</p>
        <p><strong>Pages:</strong> ${book.numberOfPages || 'N/A'}</p>
        <p><strong>Generated:</strong> ${new Date(book.createdAt).toLocaleDateString()}</p>
    </div>

    <div class="content">
        ${content.replace(/\n/g, '<br>').replace(/```([\s\S]*?)```/g, '<pre><code>$1</code></pre>')}
    </div>
    
    <div style="margin-top: 50px; text-align: center; font-size: 10pt; color: #7f8c8d;">
        <p>Generated by AI Book Generator</p>
        <p>${new Date().toISOString()}</p>
    </div>
</body>
</html>`;
  }

  // Create DOCX content
  createDOCXContent(book, content) {
    // Create a simple text format that can be opened in Word
    // In a production environment, you would use a proper DOCX library
    return `Book Title: ${book.title}
Author: ${book.author}
Programming Language: ${book.programming_language}
Level: ${book.level}
Style: ${book.style}
Pages: ${book.numberOfPages || 'N/A'}
Generated: ${new Date(book.createdAt).toLocaleDateString()}

CONTENT:
${content}

---
Generated by AI Book Generator
${new Date().toISOString()}`;
  }

  // Clean up temporary files
  cleanup() {
    try {
      if (fs.existsSync(this.tempDir)) {
        const files = fs.readdirSync(this.tempDir);
        files.forEach(file => {
          const filePath = path.join(this.tempDir, file);
          fs.unlinkSync(filePath);
        });
      }
    } catch (error) {
      console.error('Cleanup error:', error);
    }
  }
}

module.exports = FileGenerator; 