const express = require('express');
const { auth } = require('../middleware/auth');
const Book = require('../models/Book');
const fs = require('fs');
const path = require('path');

const router = express.Router();

// Download book as PDF or DOCX
router.post('/book/:bookId', auth, async (req, res) => {
  try {
    const { bookId } = req.params;
    const { format = 'PDF' } = req.body;

    // Find the book in database
    const book = await Book.findById(bookId);
    if (!book) {
      return res.status(404).json({ error: 'Book not found' });
    }

    // Check if user owns this book
    if (book.userId.toString() !== req.user.id) {
      return res.status(403).json({ error: 'Access denied' });
    }

    // Generate file content based on format
    let fileContent, fileName, mimeType;

    if (format.toUpperCase() === 'PDF') {
      // For PDF, we'll create a simple HTML that can be converted
      fileContent = generatePDFContent(book);
      fileName = `${book.title.replace(/[^a-zA-Z0-9]/g, '_')}.html`;
      mimeType = 'text/html';
    } else if (format.toUpperCase() === 'DOCX') {
      // For DOCX, we'll create a simple text format
      fileContent = generateDOCXContent(book);
      fileName = `${book.title.replace(/[^a-zA-Z0-9]/g, '_')}.txt`;
      mimeType = 'text/plain';
    } else {
      return res.status(400).json({ error: 'Unsupported format. Use PDF or DOCX' });
    }

    // Set headers for file download
    res.setHeader('Content-Type', mimeType);
    res.setHeader('Content-Disposition', `attachment; filename="${fileName}"`);
    
    // Send the file content
    res.send(fileContent);

  } catch (error) {
    console.error('Download error:', error);
    res.status(500).json({ error: 'Failed to download book' });
  }
});

// Generate PDF content (HTML format that can be converted to PDF)
function generatePDFContent(book) {
  const content = book.content || 'No content available';
  
  return `
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>${book.title}</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; line-height: 1.6; }
        h1 { color: #2c3e50; border-bottom: 2px solid #3498db; padding-bottom: 10px; }
        h2 { color: #34495e; margin-top: 30px; }
        h3 { color: #7f8c8d; }
        .author { font-style: italic; color: #7f8c8d; margin-bottom: 20px; }
        .metadata { background: #ecf0f1; padding: 15px; border-radius: 5px; margin: 20px 0; }
        .metadata p { margin: 5px 0; }
        pre { background: #f8f9fa; padding: 15px; border-radius: 5px; overflow-x: auto; }
        code { background: #f1f2f6; padding: 2px 4px; border-radius: 3px; }
    </style>
</head>
<body>
    <h1>${book.title}</h1>
    <div class="author">By ${book.author}</div>
    
    <div class="metadata">
        <p><strong>Language:</strong> ${book.language}</p>
        <p><strong>Level:</strong> ${book.level}</p>
        <p><strong>Style:</strong> ${book.style}</p>
        <p><strong>Pages:</strong> ${book.numberOfPages || 'N/A'}</p>
        <p><strong>Generated:</strong> ${new Date(book.createdAt).toLocaleDateString()}</p>
    </div>

    <div class="content">
        ${content.replace(/\n/g, '<br>').replace(/```([\s\S]*?)```/g, '<pre><code>$1</code></pre>')}
    </div>
</body>
</html>`;
}

// Generate DOCX content (simple text format)
function generateDOCXContent(book) {
  const content = book.content || 'No content available';
  
  return `
${book.title}
By ${book.author}

METADATA:
- Language: ${book.language}
- Level: ${book.level}
- Style: ${book.style}
- Pages: ${book.numberOfPages || 'N/A'}
- Generated: ${new Date(book.createdAt).toLocaleDateString()}

CONTENT:
${content}

---
Generated by AI Book Generator
${new Date().toISOString()}`;
}

// Get user's book library
router.get('/library', auth, async (req, res) => {
  try {
    const books = await Book.find({ userId: req.user.id })
      .select('title author language level style numberOfPages createdAt status')
      .sort({ createdAt: -1 });

    res.json({ books });
  } catch (error) {
    console.error('Library error:', error);
    res.status(500).json({ error: 'Failed to fetch library' });
  }
});

// Delete a book from library
router.delete('/book/:bookId', auth, async (req, res) => {
  try {
    const { bookId } = req.params;

    const book = await Book.findById(bookId);
    if (!book) {
      return res.status(404).json({ error: 'Book not found' });
    }

    // Check if user owns this book
    if (book.userId.toString() !== req.user.id) {
      return res.status(403).json({ error: 'Access denied' });
    }

    await Book.findByIdAndDelete(bookId);
    res.json({ message: 'Book deleted successfully' });

  } catch (error) {
    console.error('Delete error:', error);
    res.status(500).json({ error: 'Failed to delete book' });
  }
});

module.exports = router; 